#
# Conditionals
#
if=?ynot\\structure?:ifMethod(?ynot\\shell?,[java.lang.Boolean])
elseif=?ynot\\structure?:elseifMethod(?ynot\\shell?, [java.lang.Boolean])
else=?ynot\\structure?:elseMethod(?ynot\\shell?)
#
# Loops
#
while=?ynot\\structure?:whileMethod(?ynot\\shell?,[java.lang.Boolean])
for=?ynot\\structure?:forMethod(?ynot\\shell?,[java.util.List],[java.lang.String])
break=?ynot\\structure?:breakMethod(?ynot\\shell?)
continue=?ynot\\structure?:continueMethod(?ynot\\shell?)
#
# Functions and calls
#
function=?ynot\\structure?:functionMethod(?ynot\\shell?,[java.lang.String],[java.util.List])
end=?ynot\\structure?:endMethod(?ynot\\shell?)
return=?ynot\\structure?:returnMethod(?ynot\\shell?,[java.lang.Object])
call=?ynot\\structure?:callMethod(?ynot\\shell?,[java.lang.String],[java.util.List])
#
# Comparison operators
#
\==?ynot\\system?:equals([java.lang.Object],[java.lang.Object])
\!\==?ynot\\system?:notEquals([java.lang.Object],[java.lang.Object])
<=?ynot\\system?:lessThan([java.lang.Object],[java.lang.Object])
>=?ynot\\system?:greaterThan([java.lang.Object],[java.lang.Object])
<\==?ynot\\system?:lessOrEquals([java.lang.Object],[java.lang.Object])
>\==?ynot\\system?:greaterOrEquals([java.lang.Object],[java.lang.Object])
#
# Mathematical operators
#
assign=?ynot\\system?:assign([java.lang.Object])
+=?ynot\\system?:sum([java.lang.Number],[java.lang.Number])
-=?ynot\\system?:sub([java.lang.Number],[java.lang.Number])
*=?ynot\\system?:multiply([java.lang.Number],[java.lang.Number])
/=?ynot\\system?:divide([java.lang.Number],[java.lang.Number])
%=?ynot\\system?:modulo([java.lang.Number],[java.lang.Number])
^=?ynot\\system?:power([java.lang.Number],[java.lang.Number])
#
# Global variables
#
get=?ynot\\shell?:get([java.lang.String])
set=?ynot\\shell?:set([java.lang.String], [java.lang.Object])
unset=?ynot\\shell?:unset([java.lang.String])
#
# Reflection
#
import=?ynot\\builder?:addNamespace([java.lang.String])
new=?ynot\\builder?:build([java.lang.String], [java.util.List])
static=?ynot\\builder?:getClassWrapper([java.lang.String])
invoke=?ynot\\builder?:call([java.lang.Object], [java.lang.String], [java.util.List])
implement=?ynot\\builder?:getProxy([java.util.List], [java.lang.String], ?ynot\\shell?, ?ynot\\structure?)
#
# Others
#
concat=?ynot\\system?:concat([java.util.List])
readLine=?ynot\\system?:readln(?sysin?)
date=?ynot\\system?:getDateTime([java.lang.String])
sleep=?ynot\\system?:sleep([java.lang.Integer])
exit=?ynot\\system?:exit([java.lang.Integer])
bye=?ynot\\system?:exit(0)
#
echo=?ynot\\sysout?:println([java.lang.String])
write=?ynot\\sysout?:print([java.lang.String])
#
ui_load=?ynot\\uiHelper?:load([java.lang.String])
# File System
cd=?ynot\\fileManager?:cd([java.lang.String])
ls=?ynot\\fileManager?:ls([java.lang.String])
ll=?ynot\\fileManager?:ls([java.lang.String])
mkdir=?ynot\\fileManager?:mkdir([java.lang.String])
mkfile=?ynot\\fileManager?:mkfile([java.lang.String])
rm=?ynot\\fileManager?:rm([java.lang.String])
mv=?ynot\\fileManager?:mv([java.lang.String])
pwd=?ynot\\fileManager?:pwd()
tree=?ynot\\fileManager?:tree([java.lang.String])